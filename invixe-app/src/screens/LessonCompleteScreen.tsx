import React, { useEffect, useState } from "react";
import { View, Text, StyleSheet, ActivityIndicator } from "react-native";
import { NativeStackScreenProps } from "@react-navigation/native-stack";
import { RootStackParamList } from "../navigation/AppNavigator";
import Button from "../components/ui/Button";
import theme from "../theme";
import { useUser } from '../context/UserContext';
import Svg, { Path } from 'react-native-svg';

// Gold coin SVG (same as TopBar)
const CoinIcon = () => (
  <Svg width={40} height={40} viewBox="0 0 27 28" fill="none">
    <Path d="M13.5 27.0933C20.5416 27.0933 26.25 21.3849 26.25 14.3433C26.25 7.30163 20.5416 1.59326 13.5 1.59326C6.45837 1.59326 0.75 7.30163 0.75 14.3433C0.75 21.3849 6.45837 27.0933 13.5 27.0933Z" fill="#F4900C"/>
    <Path d="M13.5 0.593262C20.2655 0.593262 25.75 6.07777 25.75 12.8433C25.75 19.6087 20.2655 25.0933 13.5 25.0933C6.73451 25.0933 1.25 19.6087 1.25 12.8433C1.25 6.07777 6.73451 0.593262 13.5 0.593262Z" fill="#FFCC4D" stroke="#F4900C"/>
    <Path d="M13.5 24.0933C19.299 24.0933 24 19.3923 24 13.5933C24 7.79427 19.299 3.09326 13.5 3.09326C7.70101 3.09326 3 7.79427 3 13.5933C3 19.3923 7.70101 24.0933 13.5 24.0933Z" fill="#FFE8B6"/>
    <Path d="M13.5 23.3433C19.299 23.3433 24 18.6423 24 12.8433C24 7.04427 19.299 2.34326 13.5 2.34326C7.70101 2.34326 3 7.04427 3 12.8433C3 18.6423 7.70101 23.3433 13.5 23.3433Z" fill="#FFAC33"/>
    <Path d="M7.16016 8.23543C7.16016 7.82668 7.56141 7.66318 7.56141 7.66318L13.4699 4.88818L19.4347 7.66318C19.4347 7.66318 19.8457 7.75468 19.8457 8.23843V8.71918H7.16016V8.23543Z" fill="#FFE8B6"/>
    <Path d="M19.4455 9.72C19.4455 9.282 19.0668 8.92725 18.6003 8.92725H8.34553C7.87828 8.92725 7.55278 9.282 7.55278 9.72C7.55278 10.0177 7.70578 10.2742 7.94953 10.41V10.9095H9.53503V10.5127H11.1205V10.9095H12.706V10.5127H14.2915V10.9095H15.877V10.5127H17.4625V10.9095H19.0488V10.3897C19.2865 10.2487 19.4455 10.002 19.4455 9.72ZM20.6343 18.093C20.6343 18.2507 20.5716 18.402 20.4601 18.5135C20.3485 18.6251 20.1973 18.6877 20.0395 18.6877H6.95803C6.80029 18.6877 6.64902 18.6251 6.53748 18.5135C6.42594 18.402 6.36328 18.2507 6.36328 18.093C6.36328 17.9353 6.42594 17.784 6.53748 17.6724C6.64902 17.5609 6.80029 17.4982 6.95803 17.4982H20.0403C20.368 17.4982 20.6343 17.7645 20.6343 18.093Z" fill="#F4900C"/>
    <Path d="M19.8423 9.24319C19.8421 9.34835 19.8002 9.44915 19.7259 9.52351C19.6515 9.59787 19.5507 9.63974 19.4455 9.63994H7.55278C7.45177 9.63372 7.35694 9.58922 7.28761 9.5155C7.21829 9.44177 7.17969 9.34438 7.17969 9.24319C7.17969 9.14199 7.21829 9.0446 7.28761 8.97088C7.35694 8.89715 7.45177 8.85265 7.55278 8.84644L19.4455 8.84869C19.4975 8.84849 19.549 8.85854 19.5971 8.87827C19.6452 8.898 19.6889 8.92701 19.7257 8.96366C19.7626 9.0003 19.7918 9.04385 19.8118 9.09181C19.8318 9.13978 19.8422 9.19122 19.8423 9.24319ZM9.13903 9.70369H17.8608V10.5932H9.13903V9.70369Z" fill="#F4900C"/>
    <Path d="M9.53937 15.7149C9.53937 16.1529 9.30237 16.5076 9.01062 16.5076H8.48187C8.19012 16.5076 7.95312 16.1529 7.95312 15.7149V9.70437C7.95312 9.26637 8.19012 8.91162 8.48187 8.91162H9.01062C9.30237 8.91162 9.53937 9.26637 9.53937 9.70437V15.7149ZM19.0539 15.7149C19.0539 16.1529 18.8176 16.5076 18.5251 16.5076H17.9964C17.7046 16.5076 17.4676 16.1529 17.4676 15.7149V9.70437C17.4676 9.26637 17.7039 8.91162 17.9964 8.91162H18.5251C18.8169 8.91162 19.0539 9.26637 19.0539 9.70437V15.7149ZM12.7111 15.7149C12.7111 16.1529 12.4741 16.5076 12.1824 16.5076H11.6536C11.3619 16.5076 11.1249 16.1529 11.1249 15.7149V9.70437C11.1249 9.26637 11.3619 8.91162 11.6536 8.91162H12.1824C12.4741 8.91162 12.7111 9.26637 12.7111 9.70437V15.7149ZM15.8821 15.7149C15.8821 16.1529 15.6451 16.5076 15.3534 16.5076H14.8254C14.5336 16.5076 14.2966 16.1529 14.2966 15.7149V9.70437C14.2966 9.26637 14.5336 8.91162 14.8254 8.91162H15.3534C15.6451 8.91162 15.8821 9.26637 15.8821 9.70437V15.7149Z" fill="#FFD983"/>
    <Path d="M19.4474 16.1109C19.4474 16.5489 19.0927 16.9036 18.6547 16.9036H8.34744C8.13719 16.9036 7.93555 16.8201 7.78688 16.6714C7.63821 16.5228 7.55469 16.3211 7.55469 16.1109C7.55469 15.9006 7.63821 15.699 7.78688 15.5503C7.93555 15.4016 8.13719 15.3181 8.34744 15.3181H18.6547C19.0919 15.3181 19.4474 15.6729 19.4474 16.1109Z" fill="#FFCC4D"/>
    <Path d="M20.2407 16.9036C20.2407 17.3416 19.886 17.6963 19.448 17.6963H7.55447C7.34422 17.6963 7.14258 17.6128 6.99391 17.4641C6.84524 17.3155 6.76172 17.1138 6.76172 16.9036C6.76172 16.6933 6.84524 16.4917 6.99391 16.343C7.14258 16.1944 7.34422 16.1108 7.55447 16.1108H19.4472C19.8852 16.1108 20.2407 16.4656 20.2407 16.9036Z" fill="#FFD983"/>
    <Path d="M20.6343 17.4986C20.6343 17.6563 20.5716 17.8076 20.4601 17.9191C20.3485 18.0306 20.1973 18.0933 20.0395 18.0933H6.95803C6.87993 18.0933 6.80259 18.0779 6.73043 18.048C6.65827 18.0181 6.59271 17.9743 6.53748 17.9191C6.48225 17.8639 6.43844 17.7983 6.40855 17.7262C6.37867 17.654 6.36328 17.5767 6.36328 17.4986C6.36328 17.4205 6.37867 17.3431 6.40855 17.271C6.43844 17.1988 6.48225 17.1332 6.53748 17.078C6.59271 17.0228 6.65827 16.979 6.73043 16.9491C6.80259 16.9192 6.87993 16.9038 6.95803 16.9038H20.0403C20.368 16.9038 20.6343 17.1701 20.6343 17.4986Z" fill="#FFD983"/>
    <Path d="M19.4474 9.30789C19.4474 8.86989 19.0687 8.51514 18.6022 8.51514H8.34744C7.88019 8.51514 7.55469 8.86989 7.55469 9.30789C7.55469 9.60564 7.70769 9.86214 7.95144 9.99789V10.4974H9.53694V10.1006H11.1224V10.4974H12.7079V10.1006H14.2934V10.4974H15.8789V10.1006H17.4644V10.4974H19.0507V9.97764C19.2884 9.83664 19.4474 9.58989 19.4474 9.30789Z" fill="#FFCC4D"/>
    <Path d="M7.16016 8.69051C7.16016 8.28176 7.56141 8.11826 7.56141 8.11826L13.4699 5.34326L19.4347 8.11826C19.4347 8.11826 19.8457 8.20976 19.8457 8.69351V8.91176H7.16016V8.69051Z" fill="#FFD983"/>
    <Path d="M13.4993 6.35034C13.4993 6.35034 9.40801 8.27859 9.00001 8.45259C8.59126 8.62584 8.72776 8.91084 9.00076 8.91084H17.9783C18.3998 8.91084 18.3 8.58909 17.9655 8.41509C17.631 8.24184 13.4993 6.35034 13.4993 6.35034Z" fill="#FFAC33"/>
    <Path d="M19.8423 8.91091C19.8421 9.01607 19.8002 9.11687 19.7259 9.19124C19.6515 9.2656 19.5507 9.30746 19.4455 9.30766H7.55278C7.45177 9.30145 7.35694 9.25694 7.28761 9.18322C7.21829 9.1095 7.17969 9.01211 7.17969 8.91091C7.17969 8.80971 7.21829 8.71232 7.28761 8.6386C7.35694 8.56488 7.45177 8.52037 7.55278 8.51416L19.4455 8.51641C19.4975 8.51621 19.549 8.52627 19.5971 8.54599C19.6452 8.56572 19.6889 8.59474 19.7257 8.63138C19.7626 8.66802 19.7918 8.71157 19.8118 8.75954C19.8318 8.8075 19.8422 8.85894 19.8423 8.91091Z" fill="#FFD983"/>
  </Svg>
);

const COINS_REWARD = 10;
const API_URL = "http://10.0.0.52:4000/api/user/add-coins"; // Adjust as needed

type Props = NativeStackScreenProps<RootStackParamList, "LessonComplete">;

export default function LessonCompleteScreen({ navigation, route }: Props) {
  const { coins, setCoins } = useUser();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");

  useEffect(() => {
    const addCoins = async () => {
      try {
        const res = await fetch(API_URL, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ coins: COINS_REWARD }),
        });
        if (!res.ok) {
          const data = await res.json();
          throw new Error(data.error || "Failed to add coins");
        }
        const data = await res.json();
        // Update local coins state
        setCoins(data.newCoins);
      } catch (e: any) {
        console.error("Error adding coins:", e);
        setError(e.message || "Network error");
      } finally {
        setLoading(false);
      }
    };
    addCoins();
  }, []);

  const handleContinue = () => {
    navigation.navigate("Map");
  };

  return (
    <View style={{ flex: 1, backgroundColor: '#D3E9FF' }}>
      <View style={styles.container}>
        <Text style={styles.title}>🎉 כל הכבוד!</Text>
        <Text style={styles.subtitle}>סיימת את השיעור בהצלחה</Text>
        <View style={styles.coinsRow}>
          <CoinIcon />
          <Text style={styles.coinsText}>+{COINS_REWARD} מטבעות</Text>
        </View>
        {loading ? (
          <ActivityIndicator size="large" color={theme.colors.optimismOrange} style={{ marginTop: theme.spacing.md }} />
        ) : error ? (
          <Text style={styles.error}>{error}</Text>
        ) : (
          <Button text="המשך" onPress={handleContinue} />
        )}
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: theme.spacing.xl,
  },
  title: {
    fontSize: 32,
    fontFamily: theme.font.bold,
    color: theme.colors.primaryBlue,
    marginBottom: theme.spacing.lg,
    textAlign: "center",
  },
  subtitle: {
    fontSize: 22,
    color: theme.colors.text,
    marginBottom: theme.spacing.lg,
    textAlign: "center",
    fontFamily: theme.font.family,
  },
  coinsRow: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: theme.spacing.xl,
  },
  coinsText: {
    fontSize: 24,
    color: theme.colors.optimismOrange,
    fontFamily: theme.font.bold,
  },
  error: {
    color: theme.colors.error,
    fontSize: 16,
    marginTop: theme.spacing.md,
    fontFamily: theme.font.family,
    textAlign: "center",
  },
}); 